{"version":3,"sources":["components/ButtonIcon.js","components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["ButtonIcon","styled","a","Nbar","div","LogoText","h1","Navbar","className","href","CardBox","CardHeader","CardFooter","CardFooterInput","input","Card","image","caption","src","alt","dateTime","type","placeholder","NavbarGap","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mZAEA,IAKeA,EALIC,IAAOC,EAAV,K,wXCEhB,IAAMC,EAAOF,IAAOG,IAAV,KAWJC,EAAWJ,IAAOK,GAAV,KAkCCC,EAxBA,WACb,OACE,oCACA,kBAACJ,EAAD,CAAMK,UAAU,wCACd,yBAAKA,UAAU,gBACb,uBAAGC,KAAK,IAAID,UAAU,eACpB,kBAACH,EAAD,0BAGJ,yBAAKG,UAAU,6BAKb,kBAAC,EAAD,CAAYA,UAAU,eAAc,uBAAGA,UAAU,kBAAb,YACpC,kBAAC,EAAD,CAAYA,UAAU,eACpB,uBAAGA,UAAU,kBAAb,wB,qZCrCV,IAAME,EAAUT,IAAOG,IAAV,KAIPO,EAAaV,IAAOG,IAAV,KAGVQ,EAAaX,IAAOG,IAAV,KAGVS,EAAkBZ,IAAOa,MAAV,KAgFNC,EA1EF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACrB,OACE,kBAACP,EAAD,CAASF,UAAU,QACjB,kBAACG,EAAD,CAAYH,UAAU,UACpB,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBAAKU,IAAI,mBAAmBC,IAAI,cAGpC,yBAAKX,UAAU,iBACb,uBAAGA,UAAU,cAAb,mBACA,uBAAGA,UAAU,iBAAb,sBAIN,yBAAKA,UAAU,cACb,4BAAQA,UAAU,UAChB,yBAAKU,IAAKF,EAAOG,IAAI,kBAGzB,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gCACb,kBAAC,EAAD,KACE,uBAAGA,UAAU,kBAAb,qBAGJ,yBAAKA,UAAU,gCACb,6BACE,kBAAC,EAAD,KACE,uBAAGA,UAAU,kBAAb,4BAOV,yBAAKA,UAAU,WACb,2BACE,6CAEDS,EACD,uBAAGR,KAAK,KAAR,YALF,IAK2B,uBAAGA,KAAK,KAAR,QACzB,uBAAGA,KAAK,KAAR,eACA,6BACA,0BAAMW,SAAS,YAAf,2BAGJ,kBAACR,EAAD,KACE,yBAAKJ,UAAU,qBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WACb,kBAACK,EAAD,CACEL,UAAU,kBACVa,KAAK,OACLC,YAAY,2BAKpB,yBAAKd,UAAU,UACb,kBAAC,EAAD,CAAYA,UAAU,UACpB,uBAAGA,UAAU,kBAAb,oB,4FC9Ed,IAAMe,EAAYtB,IAAOG,IAAV,KAuBAoB,MAnBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKjB,UAAU,aACb,kBAACe,EAAD,MACA,yBAAKf,UAAU,WACb,yBAAKA,UAAU,2CAGb,kBAAC,EAAD,CAAMQ,MAAM,sBACZ,kBAAC,EAAD,CAAMA,MAAM,2BCVJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dea9fd47.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst ButtonIcon = styled.a`\r\n  border: none;\r\n  background: none;\r\n`;\r\n\r\nexport default ButtonIcon;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonIcon from './ButtonIcon';\r\n\r\nconst Nbar = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n  background-color: white;\r\n  justify-content: space-around;\r\n  width: 100%;\r\n  border-bottom: 1px solid lightgray;\r\n`;\r\n\r\nconst LogoText = styled.h1`\r\n  font-size: 1.4rem;\r\n  font-family: 'Pacifico', cursive;\r\n`;\r\n// const MenuIcon = styled.a`\r\n//   padding: 0 0 0 1rem;\r\n//   border: none;\r\n//   background: none;\r\n// `;\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n    <Nbar className=\"navbar is-inline-flex is-transparent\">\r\n      <div className=\"navbar-brand\">\r\n        <a href=\"/\" className=\"navbar-item\">\r\n          <LogoText>Giselle Trithip</LogoText>\r\n        </a>\r\n      </div>\r\n      <div className=\"navbar-item is-flex-touch\">\r\n        {/* <MenuIcon className=\"navbar-item\"><i className=\"material-icons\">explore</i></MenuIcon>\r\n        <MenuIcon className=\"navbar-item\">\r\n          <i className=\"material-icons\">favorite_border</i>\r\n        </MenuIcon> */}\r\n        <ButtonIcon className=\"navbar-item\"><i className=\"material-icons\">explore</i></ButtonIcon>\r\n        <ButtonIcon className=\"navbar-item\">\r\n          <i className=\"material-icons\">favorite_border</i>\r\n        </ButtonIcon>\r\n      </div>\r\n    </Nbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ButtonIcon from './ButtonIcon';\r\n\r\nconst CardBox = styled.div`\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst CardHeader = styled.div`\r\n  padding: 5px 10px;\r\n`;\r\nconst CardFooter = styled.div`\r\n  width: 100%;\r\n`;\r\nconst CardFooterInput = styled.input`\r\n  border: none;\r\n  border-radius: 0;\r\n  box-shadow: none;\r\n`;\r\n\r\nconst Card = ({ image, caption }) => {\r\n  return (\r\n    <CardBox className=\"card\">\r\n      <CardHeader className=\"header\">\r\n        <div className=\"media\">\r\n          <div className=\"media-left\">\r\n            <figure className=\"image is-48x48\">\r\n              <img src=\"/img/profile.jpg\" alt=\"Profile\" />\r\n            </figure>\r\n          </div>\r\n          <div className=\"media-content\">\r\n            <p className=\"title is-4\">Giselle Trithip</p>\r\n            <p className=\"subtitle is-6\">@giselletrithip</p>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <div className=\"card-image\">\r\n        <figure className=\"image \">\r\n          <img src={image} alt=\"posted card\" />\r\n        </figure>\r\n      </div>\r\n      <div className=\"card-content\">\r\n        <div className=\"level is-mobile\">\r\n          <div className=\"level-left\">\r\n            <div className=\"level-item has-text-centered\">\r\n              <ButtonIcon>\r\n                <i className=\"material-icons\">favorite_border</i>\r\n              </ButtonIcon>\r\n            </div>\r\n            <div className=\"level-item has-text-centered\">\r\n              <div>\r\n                <ButtonIcon>\r\n                  <i className=\"material-icons\">chat_bubble_outline</i>\r\n                </ButtonIcon>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"content\">\r\n          <p>\r\n            <strong>32 Likes</strong>\r\n          </p>\r\n          {caption}\r\n          <a href=\"/\">@bulmaio</a>.<a href=\"/\">#css</a>\r\n          <a href=\"/\">#responsive</a>\r\n          <br />\r\n          <time dateTime=\"2018-1-1\">11:09 PM - 1 Jan 2018</time>\r\n        </div>\r\n      </div>\r\n      <CardFooter>\r\n        <div className=\"columns is-mobile\">\r\n          <div className=\"column is-10\">\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <CardFooterInput\r\n                  className=\"input is-medium\"\r\n                  type=\"text\"\r\n                  placeholder=\"Add a comment . . .\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"column\">\r\n            <ButtonIcon className=\"button\">\r\n              <i className=\"material-icons\">more_horiz</i>\r\n            </ButtonIcon>\r\n          </div>\r\n        </div>\r\n      </CardFooter>\r\n    </CardBox>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\nimport \"bulma/css/bulma.css\";\nimport \"./App.css\";\nimport styled from 'styled-components';\nimport Navbar from \"./components/Navbar\";\nimport Card from './components/Card';\n\nconst NavbarGap = styled.div`\n  margin-top: 4rem;\n`;\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <div className=\"container\">\n        <NavbarGap></NavbarGap>\n        <div className=\"columns\">\n          <div className=\"column is-one-third is-offset-one-third\">\n            {/* <Card image={data.image} caption={data.caption} /> */}\n            {/* <Card image=\"/img/IMG_0002.jpg\" caption={quote} /> */}\n            <Card image=\"/img/IMG_0003.jpg\" />\n            <Card image=\"/img/IMG_0004.jpg\" />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}